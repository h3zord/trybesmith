{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "TrybeSmith API",
        "description": "Esta documentação é destinada ao projeto TrybeSmith."
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
        {
            "name": "Login",
            "description": "Endpoints"
        },
        {
            "name": "User",
            "description": "Endpoints"
        },
        {
            "name": "Product",
            "description": "Endpoints"
        },
        {
            "name": "Order",
            "description": "Endpoints"
        }
    ],
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Realizar o login com usuário e senha e em seguida gerar um token",
                "description": "Endpoint para consultar se o usuário e a senha fornecidos coincidem com os cadastrados no banco de dados.",
                "parameters": [
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para realizar o login.",
                        "schema": {
                            "$ref": "#/definitions/Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ValidToken"
                        },
                        "description": "Requisição para realizar o login efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/InvalidLoginBodyError"
                        },
                        "description": "Erro! A requisição falhou! Todos os campos devem ser preenchidos."
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/IncorrectLoginError"
                        },
                        "description": "Erro! A requisição falhou! O usuário ou a senha informados estão incorretos."
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "tags": [
                    "Order"
                ],
                "summary": "Cadastrar um novo pedido",
                "description": "Endpoint para cadastrar um novo pedido no banco de dados.",
                "parameters": [
                    {
                        "name": "authorization",
                        "in": "header",
                        "description": "Token necessário para criar um novo pedido.",
                        "type": "string",
                        "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJ1c2VybmFtZSI6InJlaWdhbCJ9LCJpYXQiOjE2Nzc0MjQ4MjIsImV4cCI6MjU0MTMzODQyMn0.Eyf-26E5EJN0A9P3ls1RImCG6tVZygCVTCq6EJmQV84"
                    },
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para criar um novo pedido.",
                        "schema": {
                            "$ref": "#/definitions/CreateOrder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/CreatedOrder"
                        },
                        "description": "Requisição para criar um novo pedido efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/InvalidCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Todos os campos devem ser preenchidos."
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/InvalidTokenError"
                        },
                        "description": "Erro! A requisição falhou! O token fornecido é inválido."
                    },
                    "404": {
                        "schema": {
                            "$ref": "#/definitions/TokenNotFoundError"
                        },
                        "description": "Erro! A requisição falhou! O token não foi encontrado."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/IncorrectCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações fornecidas são válidas."
                    }
                }
            },
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Listar todos os pedidos",
                "description": "Endpoint para listar todos os pedidos cadastrados no banco de dados.",
                "parameters": [],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OrderList"
                        },
                        "description": "Requisição para listar todos os pedidos efetuada com sucesso!"
                    }
                }
            }
        },
        "/products": {
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Cadastrar um novo produto",
                "description": "Endpoint para cadastrar um novo produto no banco de dados.",
                "parameters": [
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para criar um novo produto.",
                        "schema": {
                            "$ref": "#/definitions/CreateProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/CreateProduct"
                        },
                        "description": "Requisição para criar um novo produto efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/InvalidCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Todos os campos devem ser preenchidos."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/IncorrectCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações fornecidas são válidas."
                    }
                }
            },
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Listar todos os produtos",
                "description": "Endpoint para listar todos os produtos cadastrados no banco de dados.",
                "parameters": [],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ProductList"
                        },
                        "description": "Requisição para listar todos os produtos efetuada com sucesso!"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Cadastrar um novo usuário e em seguida gerar um token",
                "description": "Endpoint para cadastrar um novo usuário no banco de dados e retornar um token.",
                "parameters": [
                    {
                        "name": "info",
                        "in": "body",
                        "description": "Informações necessárias para criar um novo usuário.",
                        "schema": {
                            "$ref": "#/definitions/CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/ValidToken"
                        },
                        "description": "Requisição para criar um novo usuário efetuada com sucesso!"
                    },
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/InvalidCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Todos os campos devem ser preenchidos."
                    },
                    "422": {
                        "schema": {
                            "$ref": "#/definitions/IncorrectCreateBodyError"
                        },
                        "description": "Erro! A requisição falhou! Verifique se as informações fornecidas são válidas."
                    }
                }
            }
        }
    },
    "definitions": {
        "Login": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "reigal"
                },
                "password": {
                    "type": "string",
                    "example": "1dragaonoceu"
                }
            }
        },
        "CreateUser": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "h3zord"
                },
                "classe": {
                    "type": "string",
                    "example": "Mage"
                },
                "level": {
                    "type": "number",
                    "example": 15
                },
                "password": {
                    "type": "string",
                    "example": "12345678"
                }
            }
        },
        "CreateProduct": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Elmo de ferro"
                },
                "amount": {
                    "type": "string",
                    "example": "15 peças de ouro"
                }
            }
        },
        "CreateOrder": {
            "type": "object",
            "properties": {
                "productsIds": {
                    "type": "array",
                    "example": [
                        1,
                        2
                    ],
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "CreatedOrder": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "number",
                    "example": 1
                },
                "productsIds": {
                    "type": "array",
                    "example": [
                        1,
                        2
                    ],
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "ProductList": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Espada curta"
                    },
                    "amount": {
                        "type": "string",
                        "example": "10 peças de ouro"
                    },
                    "orderId": {}
                }
            }
        },
        "OrderList": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "userId": {
                        "type": "number",
                        "example": 1
                    },
                    "productsIds": {
                        "type": "array",
                        "example": [
                            2
                        ],
                        "items": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "ValidToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxLCJ1c2VybmFtZSI6InJlaWdhbCJ9LCJpYXQiOjE2Nzc0MjQ4MjIsImV4cCI6MjU0MTMzODQyMn0.Eyf-26E5EJN0A9P3ls1RImCG6tVZygCVTCq6EJmQV84"
                }
            }
        },
        "TokenNotFoundError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Token not found"
                }
            }
        },
        "InvalidTokenError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid token"
                }
            }
        },
        "InvalidLoginBodyError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Username or password are missing"
                }
            }
        },
        "InvalidCreateBodyError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "All fields must be filled"
                }
            }
        },
        "IncorrectLoginError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Username or password invalid"
                }
            }
        },
        "IncorrectCreateBodyError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Check that the information is filled in correctly"
                }
            }
        }
    }
}
